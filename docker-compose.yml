services:
  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL database for user service
  user-db:
    image: postgres:13
    container_name: user-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    volumes:
      - user_postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - app-network

  # User microservice
  user:
    build:
      context: ./services/user
    container_name: user-service
    ports:
      - "5001:5001"
    env_file:
      - ./services/user/.env
    volumes:
      - ./services/user:/app
    restart: unless-stopped
    depends_on:
      - user-db
    networks:
      - app-network

  # PostgreSQL database for recommendation-management service
  recommendation-db:
    image: postgres:13
    container_name: recommendation-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=recommendation_db
    volumes:
      - recommendation_postgres_data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    networks:
      - app-network

  # Recommendation-management microservice
  recommendation-management:
    build:
      context: ./services/recommendation-management
    container_name: recommendation-management-service
    ports:
      - "5002:5002"
    env_file:
      - ./services/recommendation-management/.env
    volumes:
      - ./services/recommendation-management:/app
    restart: unless-stopped
    depends_on:
      - recommendation-db
      - rabbitmq
    networks:
      - app-network

  # PostgreSQL database for group request service
  grouprequest-db:
    image: postgres:13
    container_name: grouprequest-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=grouprequest_db
    volumes:
      - grouprequest_postgres_data:/var/lib/postgresql/data/
    ports:
      - "5434:5432"
    networks:
      - app-network

  # Group management microservice
  group-management:
    build:
      context: ./services/group-management
    container_name: group-management-service
    ports:
      - "5003:5003"
    env_file:
      - ./services/group-management/.env
    volumes:
      - ./services/group-management:/app
    restart: unless-stopped
    depends_on:
      - grouprequest-db
    networks:
      - app-network

  # PostgreSQL database for calendar service
  calendar-db:
    image: postgres:13
    container_name: calendar-db
    environment:
      - POSTGRES_DB=calendar_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - calendar_db_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Calendar microservice
  calendar:
    build:
      context: ./services/calendar
    container_name: calendar-service
    ports:
      - "5004:5004"
    env_file:
      - ./services/calendar/.env
    volumes:
      - ./services/calendar:/app
    restart: unless-stopped
    depends_on:
      calendar-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  # PostgreSQL database for trip management service
  trip-db:
    image: postgres:13
    container_name: trip-db
    environment:
      - POSTGRES_DB=trip_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - trip_db_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Trip management microservice
  trip-management:
    build:
      context: ./services/trip-management
    container_name: trip-management-service
    ports:
      - "5005:5005"
    env_file:
      - ./services/trip-management/.env
    volumes:
      - ./services/trip-management:/app
    restart: unless-stopped
    depends_on:
      trip-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      recommendation-management:
        condition: service_started
      calendar:
        condition: service_started
    networks:
      - app-network

  # PostgreSQL database for itinerary service
  itinerary-db:
    image: postgres:13
    container_name: itinerary-db
    environment:
      - POSTGRES_DB=itinerary_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - itinerary_db_data:/var/lib/postgresql/data
    ports:
      - "5437:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Itinerary microservice
  itinerary:
    build:
      context: ./services/itinerary
    container_name: itinerary-service
    ports:
      - "5006:5006"
    env_file:
      - ./services/itinerary/.env
    volumes:
      - ./services/itinerary:/app
    restart: unless-stopped
    depends_on:
      itinerary-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      recommendation-management:
        condition: service_started
      calendar:
        condition: service_started
    networks:
      - app-network

  # Expense Management microservice
  expense-management:
    build:
      context: ./services/expense-management
    container_name: expense-management-service
    ports:
      - "5007:5007"
    volumes:
      - ./services/expense-management:/app
    restart: unless-stopped
    depends_on:
      - itinerary
    networks:
      - app-network

  # PostgreSQL database for finance service
  finance-db:
    image: postgres:13
    container_name: finance-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=finance_db
    volumes:
      - finance_postgres_data:/var/lib/postgresql/data/
    ports:
      - "5438:5432"
    networks:
      - app-network

  # Finance microservice
  finance:
    build:
      context: ./services/finance
    container_name: finance-service
    ports:
      - "5008:5008"
    env_file:
      - ./services/finance/.env
    volumes:
      - ./services/finance:/app
    restart: unless-stopped
    depends_on:
      - finance-db
    networks:
      - app-network

volumes:
  rabbitmq_data:
  user_postgres_data:
  grouprequest_postgres_data:
  recommendation_postgres_data:
  calendar_db_data:
  trip_db_data:
  itinerary_db_data:
  finance_postgres_data:

networks:
  app-network: